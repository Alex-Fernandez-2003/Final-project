---
import Layout from "../../layouts/LayoutAdmin.astro";
import Sidebar from "../../components/admin/Sidebar.astro";
import ModalEdicionProductos from "../../components/admin/ModalEditarProductos.astro";
import ModalSeguridad from "../../components/admin/ModalSeguridad.astro";
import Tabla from '../../components/admin/Tabla.astro';
import ModalBusquedaAdicion from "../../components/admin/ModalBusquedaAdicion.astro";

// Fetch initial articles from the API
const response = await fetch("https://apimocha.com/reydelbolo/articles");
const initialArticles = await response.json();
---

<Layout title="Dashboard de Administración - Productos">
  <div id="app" class="hidden">
    <div class="min-h-screen w-full bg-white flex flex-col md:flex-row">
      <!-- Barra lateral -->
      <Sidebar />
      <!-- Contenido Principal -->
      <main class="flex-1 p-8 md:ml-64 bg-green-100">
        <h2 class="text-3xl font-bold text-gray-900 mb-6">
          Gestión de Productos
        </h2>
        <!-- Buscar y Añadir Producto -->
        <ModalBusquedaAdicion/>
        <!-- Tabla de Productos -->
        <Tabla/>
      </main>
    </div>
    <!-- Modal para Añadir/Editar Producto -->
    <ModalEdicionProductos />
    <!-- Modal de verificación de inicio de sesion -->
    <ModalSeguridad />
  </div>
</Layout>
<script define:vars={{ initialArticles }}>
  // Función para verificar que el usuario tenga una sesion iniciada con sus credenciales
  function checkSession() {
    const sessionUser = localStorage.getItem("sessionUser");
    if (!sessionUser) {
      document.getElementById("unauthorized").classList.remove("hidden");
      return false;
    }
    document.getElementById("app").classList.remove("hidden");
    return true;
  }
  // Función para cerrar sesión
  function logout() {
    localStorage.removeItem("sessionUser");
    window.location.href = "../admin/";
  }

  // Inicializar artículos en localStorage si no están presentes
  if (!localStorage.getItem("articles")) {
    localStorage.setItem("articles", JSON.stringify(initialArticles));
  }

  // Función para obtener artículos de localStorage
  function getArticles() {
    return JSON.parse(localStorage.getItem("articles")) || [];
  }

  // Función para guardar artículos en localStorage
  function saveArticles(articles) {
    localStorage.setItem("articles", JSON.stringify(articles));
  }

  // Función para renderizar artículos en la tabla
  function renderArticles() {
    const articles = getArticles();
    const tableBody = document.getElementById("productsTableBody");
    tableBody.innerHTML = "";

    articles.forEach((article) => {
      const row = document.createElement("tr");
      row.className = "border-b border-gray-300";
      row.innerHTML = `
      <td class="py-3">${article.id}</td>
      <td>${article.article}</td>
      <td>${article.description}</td>
      <td>$${article.price.toFixed(2)}</td>
      <td>
        <button class="text-blue-600 hover:text-blue-500 mr-2 edit-btn" data-id="${article.id}">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
          </svg>
        </button>
        <button class="text-red-600 hover:text-red-500 delete-btn" data-id="${article.id}">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
          </svg>
        </button>
      </td>
    `;
      tableBody.appendChild(row);
    });
  }

  // Función para añadir un nuevo artículo
  function addArticle(article) {
    if (confirm("¿Estás seguro de que deseas añadir este artículo?")) {
      const articles = getArticles();
      article.id =
        articles.length > 0 ? Math.max(...articles.map((a) => a.id)) + 1 : 1;
      articles.push(article);
      saveArticles(articles);
      renderArticles();
    }
  }

  // Función para actualizar un artículo existente
  function updateArticle(updatedArticle) {
    if (confirm("¿Estás seguro de que deseas actualizar este artículo?")) {
      const articles = getArticles();
      const index = articles.findIndex((a) => a.id === updatedArticle.id);
      if (index !== -1) {
        articles[index] = updatedArticle;
        saveArticles(articles);
        renderArticles();
      }
    }
  }

  // Función para eliminar un artículo
  function deleteArticle(id) {
    if (confirm("¿Estás seguro de que deseas eliminar este artículo?")) {
      const articles = getArticles();
      const updatedArticles = articles.filter((a) => a.id !== id);
      saveArticles(updatedArticles);
      renderArticles();
    }
  }

  // Verificar sesión antes de inicializar
  if (checkSession()) {
    // Event listener para el botón de añadir producto
    document.getElementById("addProductBtn").addEventListener("click", () => {
      document.getElementById("modalTitle").textContent = "Añadir Producto";
      document.getElementById("productId").value = "";
      document.getElementById("articleInput").value = "";
      document.getElementById("descriptionInput").value = "";
      document.getElementById("priceInput").value = "";
      document.getElementById("productModal").classList.remove("hidden");
    });

    // Event listener para el botón de cancelar en el modal
    document.getElementById("cancelBtn").addEventListener("click", () => {
      document.getElementById("productModal").classList.add("hidden");
    });

    // Event listener para el envío del formulario
    document.getElementById("productForm").addEventListener("submit", (e) => {
      e.preventDefault();
      const id = document.getElementById("productId").value;
      const article = {
        article: document.getElementById("articleInput").value,
        description: document.getElementById("descriptionInput").value,
        price: parseFloat(document.getElementById("priceInput").value),
      };

      if (id) {
        article.id = parseInt(id);
        updateArticle(article);
      } else {
        addArticle(article);
      }

      document.getElementById("productModal").classList.add("hidden");
    });

    // Delegación de eventos para botones de editar y eliminar
    document
      .getElementById("productsTableBody")
      .addEventListener("click", (e) => {
        if (e.target.closest(".edit-btn")) {
          const id = parseInt(
            e.target.closest(".edit-btn").getAttribute("data-id")
          );
          const article = getArticles().find((a) => a.id === id);
          if (article) {
            document.getElementById("modalTitle").textContent =
              "Editar Producto";
            document.getElementById("productId").value = article.id;
            document.getElementById("articleInput").value = article.article;
            document.getElementById("descriptionInput").value =
              article.description;
            document.getElementById("priceInput").value = article.price;
            document.getElementById("productModal").classList.remove("hidden");
          }
        } else if (e.target.closest(".delete-btn")) {
          const id = parseInt(
            e.target.closest(".delete-btn").getAttribute("data-id")
          );
          if (confirm("¿Estás seguro de que quieres eliminar este producto?")) {
            deleteArticle(id);
          }
        }
      });

    // Event listener para la busqueda
    document.getElementById("searchInput").addEventListener("input", (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const articles = getArticles();
      const filteredArticles = articles.filter(
        (article) =>
          article.article.toLowerCase().includes(searchTerm) ||
          article.description.toLowerCase().includes(searchTerm)
      );
      renderFilteredArticles(filteredArticles);
    });

    // Event listener para el boton de cierre de sesion
    document.getElementById("logoutBtn").addEventListener("click", logout);

    // Renderizar los articulos
    renderArticles();
  }

  // Function para rendereizar los articulos filtrados
  function renderFilteredArticles(articles) {
    const tableBody = document.getElementById("productsTableBody");
    tableBody.innerHTML = "";

    articles.forEach((article) => {
      const row = document.createElement("tr");
      row.className = "border-b border-gray-300";
      row.innerHTML = `
      <td class="py-3">${article.id}</td>
      <td>${article.article}</td>
      <td>${article.description}</td>
      <td>$${article.price.toFixed(2)}</td>
      <td>
        <button class="text-blue-600 hover:text-blue-500 mr-2 edit-btn" data-id="${article.id}">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
          </svg>
        </button>
        <button class="text-red-600 hover:text-red-500 delete-btn" data-id="${article.id}">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
          </svg>
        </button>
      </td>
    `;
      tableBody.appendChild(row);
    });
  }
</script>
